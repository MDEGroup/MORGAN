parser	LazySnapshots (add,boolean,method) (containsAll,boolean,method) (isEmpty,boolean,method) (clear,void,method) (fill,void,method) (remove,boolean,method) (contains,boolean,method) (iterator,java.util.Iterator<org.netbeans.modules.parsing.api.Snapshot>,method) (removeAll,boolean,method) (size,int,method) (addAll,boolean,method) (toArray,T[],method) (retainAll,boolean,method) (sources,java.util.Collection<? extends org.netbeans.modules.parsing.api.Source>,field) 
parser	MimeTaskAction (run,Void,method) (parser,Parser,field) (userTask,UserTask,field) 
parser	NopScheduler (createSchedulerEvent,SchedulerEvent,method) 
parser	RemovedTask (hashCode,int,method) (equals,boolean,method) (toString,String,method) (run,void,method) (task,SchedulerTask,field) 
parser	MySourceAccessor (attachScheduler,void,method) (testFlag,boolean,method) (taskRemoved,int,method) (assignListeners,void,method) (setSourceModification,void,method) (cleanFlag,boolean,method) (setParser,void,method) (getLineStartOffset,int,method) (getParser,Parser,method) (get,Source,method) (createSnapshot,Snapshot,method) (create,Source,method) (createSchedulerEvents,java.util.Map<java.lang.Class<? extends org.netbeans.modules.parsing.spi.Scheduler>,org.netbeans.modules.parsing.spi.SchedulerEvent>,method) (taskAdded,int,method) (mimeTypeMayChanged,void,method) (invalidate,boolean,method) (getAndSetCache,SourceCache,method) (getLastEventId,long,method) (suppressListening,void,method) (testAndCleanFlags,boolean,method) (getCache,SourceCache,method) (getSchedulerEvent,SchedulerEvent,method) (getSourceModificationEvent,SourceModificationEvent,method) (setSchedulerEvent,void,method) (getEnvControl,SourceControl,method) (parsed,void,method) (getParserEventForward,ParserEventForward,method) (setFlags,void,method) (getEnv,SourceEnvironment,method) 
parser	Factory (create,java.util.Collection<org.netbeans.modules.parsing.spi.SchedulerTask>,method) 
parser	UserTaskAction (run,Void,method) (source,Source,field) (userTask,UserTask,field) 
parser	Accessor (createSchedulerEvent,SchedulerEvent,method) 
parser	Result (invalidate,void,method) (getSnapshot,Snapshot,method) (snapshot,Snapshot,field) 
parser	Control (sourceChanged,void,method) (getScheduler,Scheduler,method) (scheduler,Scheduler,field) 
parser	DefaultSourceFactory (createSource,Source,method) (removeSource,Source,method) (getSource,Source,method) (instances,java.util.Map<org.openide.filesystems.FileObject,java.lang.ref.Reference<org.netbeans.modules.parsing.api.Source>>,field) 
parser	CurrentRequestReference (cancel,Request,method) (isCancelled,boolean,method) (setCurrentParser,void,method) (clearCurrentTask,void,method) (setCurrentTask,boolean,method) (cancelCompleted,void,method) (reference,Request,field) (canceled,SchedulerTask,field) (activeParser,Parser,field) (CRR_LOCK,Object,field) (canceledReference,Request,field) 
parser	CancelStrategy (getCancelReason,CancelReason,method) (getRequestToCancel,Request,method) (apply,boolean,method) (callDeprecatedParserCancel,boolean,method) (cancelReplace,Request,field) (callDeprecatedParserCancel,boolean,field) (cancelReason,CancelReason,field) 
parser	RequestPerformer (run,void,method) (execute,void,method) (owner,java.util.concurrent.atomic.AtomicReference<java.lang.Thread>,field) (r,Request,field) 
parser	LkpListener (resultChanged,void,method) 
parser	ScanSync (cancel,boolean,method) (isCancelled,boolean,method) (taskFinished,void,method) (get,Void,method) (checkCaller,void,method) (isDone,boolean,method) (canceled,AtomicBoolean,field) (task,org.openide.util.Mutex.ExceptionAction<java.lang.Void>,field) (sync,CountDownLatch,field) 
parser	DeferredTask (task,org.openide.util.Mutex.ExceptionAction<java.lang.Void>,field) (sources,java.util.Collection<org.netbeans.modules.parsing.api.Source>,field) (context,org.openide.util.Lookup,field) (sync,ScanSync,field) 
parser	ASourceModificationEvent (add,ExtendableSourceModificationEvent,method) (getAffectedStartOffset,int,method) (getAffectedEndOffset,int,method) (toString,String,method) (endOffset,int,field) (startOffset,int,field) 
